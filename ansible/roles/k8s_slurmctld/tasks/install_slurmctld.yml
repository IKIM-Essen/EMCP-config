---
- name: Ensure slurmctld namespace
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ rke2_kubeconf_host_path }}{{ rke2_download_kubeconf_file_name }}"
    api_version: v1
    kind: Namespace
    name: "{{ slurm_namespace }}"

# A headless service is required for StatefulSet in order to keep the network
# identity of pods stable.
- name: Create the internal-facing slurmctld headless service
  kubernetes.core.k8s:
    kubeconfig: "{{ rke2_kubeconf_host_path }}{{ rke2_download_kubeconf_file_name }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: slurmctld-headless
        namespace: "{{ slurm_namespace }}"
      spec:
        selector:
          app: slurmctld
        ports:
          - name: slurmctld
            protocol: TCP
            port: "{{ slurmctld_external_port }}"
            targetPort: "{{ slurmctld_internal_port }}"
        clusterIP: None
    state: present

- name: Create the external-facing slurmctld service
  kubernetes.core.k8s:
    kubeconfig: "{{ rke2_kubeconf_host_path }}{{ rke2_download_kubeconf_file_name }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: slurmctld-lb
        namespace: "{{ slurm_namespace }}"
        annotations:
          metallb.universe.tf/loadBalancerIPs: "{{ slurmctld_lb_ip | default(omit) }}"
      spec:
        selector:
          # Since slurmctld doesn't support more than 1 pod, the service should
          # target it directly. With StatefulSets, the pod name is predictable.
          statefulset.kubernetes.io/pod-name: "{{ slurmctld_deployment_name }}-0"
        ports:
          - name: slurmctld
            protocol: TCP
            port: "{{ slurmctld_external_port }}"
            targetPort: "{{ slurmctld_internal_port }}"
          - name: slurmctldssh
            protocol: TCP
            port: "{{ slurmctld_external_ssh_port }}"
            targetPort: "{{ slurmctld_internal_ssh_port }}"
        # Since slurmctld needs to see the source IP from slurm clients, deploy
        # it as a LoadBalancer service with externalTrafficPolicy set to Local.
        externalTrafficPolicy: Local
        type: LoadBalancer
    state: present

- name: Create the slurmctld StatefulSet
  kubernetes.core.k8s:
    kubeconfig: "{{ rke2_kubeconf_host_path }}{{ rke2_download_kubeconf_file_name }}"
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: "{{ slurmctld_deployment_name }}"
        namespace: "{{ slurm_namespace }}"
        labels:
          app: slurmctld
      spec:
        serviceName: slurmctld-headless
        replicas: 1
        selector:
          matchLabels:
            app: slurmctld
        template:
          metadata:
            labels:
              app: slurmctld
          spec:
            # Use an init container to make sure that the slurmctld process can
            # write to StateSaveLocation.
            initContainers:
              - name: state-dir-chown
                image: "{{ slurmctld_image_url }}"
                command:
                  - chown
                args:
                  - "{{ slurmctld_state_volume_owner }}:{{ slurmctld_state_volume_owner }}"
                  - "{{ slurmctld_state_save_location }}"
                volumeMounts:
                  - name: slurm-state
                    mountPath: "{{ slurmctld_state_save_location }}"
            containers:
              - name: slurmctld
                image: "{{ slurmctld_image_url }}"
                resources:
                  requests:
                    memory: "{{ slurmctld_resources_req_mem }}"
                    cpu: "{{ slurmctld_resources_req_cpu }}"
                  limits:
                    memory: "{{ slurmctld_resources_lim_mem }}"
                    cpu: "{{ slurmctld_resources_lim_cpu }}"
                volumeMounts:
                  - name: slurm-state
                    mountPath: "{{ slurmctld_state_save_location }}"
                  - name: slurm-config
                    mountPath: "{{ slurmctld_config_dir }}"
                  - name: munge-config
                    mountPath: "{{ slurmctld_munge_dir }}"
                  - name: slurmctld-ssh
                    mountPath: "/home/{{ slurmctld_ssh_user }}/.ssh"
                ports:
                  - containerPort: "{{ slurmctld_internal_port }}"
                  - containerPort: "{{ slurmctld_internal_ssh_port }}"
            imagePullSecrets:
              - name: "{{ slurmctld_image_registry_secret_name | default(omit) }}"
        volumeClaimTemplates:
          - metadata:
              name: slurm-state
              namespace: "{{ slurm_namespace }}"
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: longhorn
              resources:
                requests:
                  storage: "{{ slurmctld_state_volume_size }}"
          - metadata:
              name: slurm-config
              namespace: "{{ slurm_namespace }}"
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: longhorn
              resources:
                requests:
                  storage: 2Mi
          - metadata:
              name: munge-config
              namespace: "{{ slurm_namespace }}"
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: longhorn
              resources:
                requests:
                  storage: 2Mi
          - metadata:
              name: slurmctld-ssh
              namespace: "{{ slurm_namespace }}"
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: longhorn
              resources:
                requests:
                  storage: 2Mi
    state: present
